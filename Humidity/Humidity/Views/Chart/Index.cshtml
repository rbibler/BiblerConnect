@model Humidity.Models.SensorAverages

@{
    ViewBag.Title = "Readings for " + Model.readings.FirstOrDefault().timeLogged.ToShortDateString();
    int countTotal = Model.humidityArray.Length;
    int modValue = countTotal / 50;
    string times = "";
    string humidityValues = "";
    string tempValues = "";
    int count = 0;
    DateTime last = Model.readings.FirstOrDefault().timeLogged;
    DateTime pres;
    TimeZoneInfo est = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
    last = TimeZoneInfo.ConvertTimeFromUtc(last, est);
    foreach(var item in Model.readings)
    {
        pres = TimeZoneInfo.ConvertTimeFromUtc(item.timeLogged, est);
        if (count == 0)
        {
            times = times + pres.ToShortTimeString();
        } else if(count > 0 || count == countTotal)
        {
            if (count % modValue == 0)
            {
                if (pres.Date > last.Date)
                {
                    times = times + "," + pres.ToShortDateString();
                    last = pres.Date;
                }
                else
                {
                    times = times + "," + pres.ToShortTimeString();
                }
            } else
            {
                times = times + ",";
            }
        }
        count++;
    }
    for(int i = 0; i < Model.humidityArray.Length; i++)
    {
        if(i == 0)
        {
            humidityValues = humidityValues + Model.humidityArray[0];
            tempValues = tempValues + Model.tempArray[0];
        } else 
        {
            humidityValues = humidityValues + "," + Model.humidityArray[i];
            tempValues = tempValues + "," + Model.tempArray[i];
        }
    }
}
<style>

    @@media (min-width: 768px) {
        #chartCanvas {
            width: 800px;
            height: 400px;
        }

    }

    @@media (max-width: 767px) {

        #chartCanvas {
            width: 400px;
            height: 200px;
        }

    }
</style>
<h2 id="index">@ViewBag.title</h2>
<canvas id="chartCanvas"></canvas>
<script>
    var timeString = "@times";
    var humidityString = "@humidityValues";
    var tempString = "@tempValues";
    var timeArray = timeString.split(',');
    var humidityArray = humidityString.split(',');
    var tempArray = tempString.split(',');
    var data = {
        labels: timeArray,
        datasets: [
            {
                label: "Temperature",
                fillColor: "rgba(255,160,66,0.4)",
                strokeColor: "rgba(255,136,17,1)",
                pointColor: "rgba(202,101,0,1)",
                pointStrokeColor: "#fff",
                pointHighlightFill: "#fff",
                pointHighlightStroke: "rgba(220,220,220,1)",
                data: tempArray,
            },
            {
                label: "Humidity",
                fillColor: "rgba(0,128,192,0.5)",
                strokeColor: "rgba(151,187,205,1)",
                pointColor: "rgba(151,187,205,1)",
                pointStrokeColor: "#fff",
                pointHighlightFill: "#fff",
                pointHighlightStroke: "rgba(151,187,205,1)",
                data: humidityArray,
            }
        ]
    };
    var options = {
        pointDot: false,
        responsive: false,
        ///Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: false,
        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",
        //Number - Width of the grid lines
        scaleGridLineWidth: 1,
        //Boolean - Whether the line is curved between points
        bezierCurve: true,
        //Number - Tension of the bezier curve between points
        bezierCurveTension: 0.5,
        //Boolean - Whether to show a dot for each point
        pointDot: false,
        //Number - Radius of each point dot in pixels
        pointDotRadius: 2,
        //Number - Pixel width of point dot stroke
        pointDotStrokeWidth: 1,
        //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
        pointHitDetectionRadius: 0,
        //Boolean - Whether to show a stroke for datasets
        datasetStroke: true,
        //Number - Pixel width of dataset stroke
        datasetStrokeWidth: 2,
        //Boolean - Whether to fill the dataset with a colour
        datasetFill: true,

    }
    var c = document.getElementById("chartCanvas");
    var ctx = c.getContext("2d");
    var myNewLineChart = new Chart(ctx).Line(data, options);
</script>

